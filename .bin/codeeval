#!/bin/bash
#
# CodeEval
# https://cixtor.com/
# https://www.codeeval.com/
#
# CodeEval is a platform used by developers to showcase their skills. Developers
# can participate in app building competitions and win cash/prizes. They can also
# solve programming challenges as a way to impress employers with their technical
# skills. Employers can use CodeEval as a way to enhance their brand by launching
# competitions/programming challenges and as a means to get introduced to the best
# developers.
#
IFS=$'\n'

if [[ "$1" == "" ]] || [[ "$1" =~ help ]]; then
    echo "CodeEval Solution Checker"
    echo "https://www.codeeval.com/"
    echo "Usage:"
    echo "  $0 [challenge.ext] [--debug]"
    echo "  $0 solution.cpp --debug"
    echo "  $0 solution.go"
    exit 1
fi

EXEC_COMMAND="null"
SOLUTION_FILE="$1"
DEBUG_UNIT_TEST="$2"
TEMP_INPUT_FILE='temp.input.txt'
UNIT_TEST_FILE='temp.unittest.php'
PHPUNIT_BIN="/usr/local/bin/phpunit"
EXTENSION=$(echo "${SOLUTION_FILE}" | rev | cut -d. -f1 | rev)

case "$EXTENSION" in
    'rb' ) EXEC_COMMAND="ruby ${SOLUTION_FILE} %s";;
    'py' ) EXEC_COMMAND="python3 ${SOLUTION_FILE} %s";;
    'php' ) EXEC_COMMAND="php -f ${SOLUTION_FILE} %s";;
esac

if [[ "$EXEC_COMMAND" == "null" ]]; then
    echo "Language is not supported: ${EXTENSION}"
    exit 1
fi

if [[ ! -e "input.txt" ]]; then
    echo "Input file is missing: input.txt"
    exit 1
fi

if [[ ! -e "output.txt" ]]; then
    echo "Output file is missing: output.txt"
    exit 1
fi

if [[ "$PHPUNIT_BIN" == "" ]]; then
    echo "PHPUnit was not found â€” https://phpunit.de/"
    exit 1
fi

INPUT_VALUES=()
OUTPUT_VALUES=()
while read -r LINE; do INPUT_VALUES+=("$LINE"); done < input.txt
while read -r LINE; do OUTPUT_VALUES+=("$LINE"); done < output.txt

TOTAL_CASES="${#INPUT_VALUES[@]}"

PHP_CODE="" # Holds the PHPUnit test cases.
PHP_CODE+="<?php\n"
PHP_CODE+="function s(\$text = '') {\n"
PHP_CODE+="  \$input = '$TEMP_INPUT_FILE';\n"
PHP_CODE+="  \$text = base64_decode(\$text);\n"
PHP_CODE+="  \$command = sprintf('$EXEC_COMMAND', \$input);\n"
PHP_CODE+="  file_put_contents(\$input, \$text, LOCK_EX);\n"
PHP_CODE+="  return exec(\$command);\n"
PHP_CODE+="}\n"
PHP_CODE+="class CodeEvalTest extends PHPUnit_Framework_TestCase {\n"
for (( KEY=0; KEY<TOTAL_CASES; KEY++ )); do
    INPUTSTR=$(echo "${INPUT_VALUES[KEY]}" | base64 | tr -d '\n')
    EXPECTED=$(echo "${OUTPUT_VALUES[KEY]}" | sed "s/'/\\\'/g")
    PHP_CODE+="  public function test_codeeval_case_${KEY}() {\n"
    PHP_CODE+="    \$this->assertEquals('$EXPECTED', s('${INPUTSTR}'));\n"
    PHP_CODE+="  }\n"
done
PHP_CODE+="}"

# Write PHP code into the test file.
echo -e "$PHP_CODE" > "$UNIT_TEST_FILE"

# Print the content of the test file if necessary.
if [[ "$DEBUG_UNIT_TEST" == "--debug" ]]; then
    cat "$UNIT_TEST_FILE" && exit 0
fi

# Execute the test file using the PHPUnit tool.
eval "$PHPUNIT_BIN --color $UNIT_TEST_FILE"
rm -fv -- "$UNIT_TEST_FILE"
rm -fv -- "$TEMP_INPUT_FILE"
exit 0
