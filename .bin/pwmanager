#!/bin/bash
# Rudimentary password manager
STORAGE="${HOME}/.passwords.dat"
PLAINTEXT="${HOME}/.passwords.txt"

echo "OpenSSL Password Manager"

if [[ "$1" =~ "help" ]]; then
    SCRIPT=$(basename "$0")
    echo
    echo "This is a rudimentary password manager powered by OpenSSL. Using a file"
    echo "with information about the accounts in plain text, the tool will encrypt"
    echo "the data using AES-256-CBC. Be aware that the decryption process puts the"
    echo "data in a temporary file that can be easily accessed by any 3rd-party"
    echo "application or user in the system until the editor of choice used to"
    echo "manage its content is closed."
    echo
    echo "Usage:"
    echo "  ${SCRIPT}          Manages the password database"
    echo "  ${SCRIPT} -help    Prints this information message"
    echo "  ${SCRIPT} -edit    Modifies an existing password database"
    echo "  ${SCRIPT} -create  Creates or overrides a password database"
    exit 2
fi

if [[ ! -e "$STORAGE" ]] || [[ "$1" == "-create" ]]; then
    echo "Creating new password database"
    vim -- "$PLAINTEXT"
    rm -- "$STORAGE" 2> /dev/null
    echo "Encrypting password database"
    openssl enc -aes-256-cbc -in "$PLAINTEXT" -out "$STORAGE"
    rm -- "$PLAINTEXT" 2> /dev/null
    echo "Finished!"
    exit
fi

if [[ "$1" == "-edit" ]]; then
    echo "Decrypting password database"
    if ! openssl enc -aes-256-cbc -d -in "$STORAGE" -out "$PLAINTEXT"; then
        echo "Incorrect password; aborting edit procedure."
        exit 1
    fi

    ENCRYPT="true"
    vim -- "$PLAINTEXT"
    rm -- "$STORAGE" 2> /dev/null
    echo "Re-encrypting password database"
    while [[ "$ENCRYPT" == "true" ]]; do
        if openssl enc -aes-256-cbc -in "$PLAINTEXT" -out "$STORAGE"; then
            ENCRYPT="false"
            break
        fi
    done
    rm -- "$PLAINTEXT" 2> /dev/null
    echo "Finished!"
    exit
fi

OUTPUT=$(mktemp)
echo "Exporting to ${OUTPUT}"
if openssl enc -aes-256-cbc -d -in "$STORAGE" -out "$OUTPUT"; then
    /usr/bin/vim -- "$OUTPUT"
    echo -n "Deleting TMP "
    rm -fv -- "$OUTPUT"
fi
